@page "/turma"
@rendermode InteractiveServer
@using SistemaEscolarWeb.Services
@using SistemaEscolarWeb.Models
@using SistemaEscolarWeb.Components.Shared
@inject EscolaService EscolaService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>Turma</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Turmas</h1>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Listagem de Turmas</h5>
            <button class="btn btn-primary" @onclick="@(() => CadastrarTurma())">
                <i class="bi bi-plus-circle"></i> Cadastrar Turma
            </button>
        </div>
        <div class="card-body">
            @if (turmas.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Turma</th>
                                <th>Série</th>
                                <th>Estudantes</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var turma in turmas)
                            {
                                var serie = EscolaService.GetEscola().Series.FirstOrDefault(s => s.Turmas.Contains(turma));
                                <tr>
                                    <td>@turma.ID</td>
                                    <td>@turma.Nome</td>
                                    <td>@(serie?.Nome ?? "N/A")</td>
                                    <td>@turma.Estudantes.Count</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-info me-2" @onclick="@(() => VerDetalhes(turma.ID))">
                                        <i class="bi bi-eye"></i> Detalhes
                                        </button>
                                        <button class="btn btn-sm btn-warning me-2" @onclick="@(() => AlterarTurma(turma.ID))">
                                            <i class="bi bi-pencil"></i> Alterar
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="@(() => ExcluirTurma(turma.ID))">
                                            <i class="bi bi-trash"></i> Excluir
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <p class="text-muted">Nenhuma turma cadastrada.</p>
                </div>
            }
        </div>
    </div>
</div>

@if (mostrarModalCadastro)
{
<!-- Modal para Cadastro de Turma -->
<ModalAlterarCadastrar 
    titulo="Cadastrar Nova Turma"

    labelEdit1="Nome da Turma"
    expEdit1="Ex: A, B, C, 1º A, etc."

    labelSerie1="Série"
    expSerie1="Selecione uma série"
    series="series"

    OnFecharModal="@FecharModal"
    OnSalvar="@SalvarTurma"
/>
}

@if (mostrarModalAlteracao)
{
<!-- Modal para Alteração de Turma -->
<ModalAlterarCadastrar
    titulo="Alterar Turma"

    labelEdit1="Série Atual"
    textoEdit1="@serieAtual"
    enableEdit1=false

    labelEdit2="Nome da Turma"
    textoEdit2="@nomeTurma"

    OnFecharModal="@FecharModalAlteracao"
    OnSalvar="@SalvarAlteracaoTurma"
/>
}

@code {
    private List<Models.Turma> turmas = new();
    private List<Models.Serie> series = new();
    private bool mostrarModalCadastro = false;
    private bool mostrarModalAlteracao = false;
    private string nomeTurma = string.Empty;
    //private int serieSelecionada = 0;
    private int turmaIdAlteracao = 0;
    private string serieAtual = string.Empty;

    protected override void OnInitialized()
    {
        turmas = EscolaService.TurmaListar();
        series = EscolaService.GetEscola().Series;
    }

    private void CadastrarTurma()
    {
        nomeTurma = string.Empty;
        //serieSelecionada = 0;
        mostrarModalCadastro = true;
        Console.WriteLine("CadastrarTurma chamado");
    }

    private void FecharModal()
    {
        mostrarModalCadastro = false;
        nomeTurma = string.Empty;
        //serieSelecionada = 0;
        Console.WriteLine("FecharModal chamado");
    }

    private void FecharModalAlteracao()
    {
        mostrarModalAlteracao = false;
        nomeTurma = string.Empty;
        turmaIdAlteracao = 0;
        serieAtual = string.Empty;
    }   

    private async Task SalvarTurma((string nome, int serieId) dados)
    {
        if (string.IsNullOrWhiteSpace(dados.nome) || dados.serieId == 0)
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, preencha todos os campos obrigatórios.");
            Snackbar.Add(message: "Por favor, preencha todos os campos obrigatórios.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.CadastrarTurma(dados.nome, dados.serieId);
            turmas = EscolaService.TurmaListar();
            FecharModal();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Turma cadastrada com sucesso!");
            Snackbar.Add(message: "Turma cadastrada com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao cadastrar turma: {ex.Message}");
            Snackbar.Add(message: $"Erro ao cadastrar turma: {ex.Message}", Severity.Error);
        }
    }

    private async Task SalvarAlteracaoTurma((string nome, int turmaId) dados)
    {
        nomeTurma = dados.nome;

        if (string.IsNullOrWhiteSpace(nomeTurma))
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, preencha o nome da turma.");
            Snackbar.Add(message: "Por favor, preencha o nome da turma.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.AlterarTurma(turmaIdAlteracao, nomeTurma);
            turmas = EscolaService.TurmaListar();
            FecharModalAlteracao();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Turma alterada com sucesso!");
            Snackbar.Add(message: "Turma alterada com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao alterar turma: {ex.Message}");
            Snackbar.Add(message: $"Erro ao alterar turma: {ex.Message}", Severity.Error);
        }
    }

    private void VerDetalhes(int turmaId)
    {
        Console.WriteLine($"VerDetalhes chamado com id={turmaId}");

        //await JSRuntime.InvokeVoidAsync("console.log", $"VerDetalhes chamado com id={turmaId}");

        Navigation.NavigateTo($"/turma/detalhes/{turmaId}");
    }

    private void AlterarTurma(int turmaId)
    {
        var turma = EscolaService.GetTurmaPorId(turmaId);
        if (turma != null)
        {
            turmaIdAlteracao = turmaId;
            nomeTurma = turma.Nome;
            
            // Encontrar a série da turma
            var serie = EscolaService.GetEscola().Series.FirstOrDefault(s => s.Turmas.Contains(turma));
            serieAtual = serie?.Nome ?? "N/A";
            
            mostrarModalAlteracao = true;
        }
    }

    private async Task ExcluirTurma(int turmaId)
    {
        var turma = EscolaService.GetTurmaPorId(turmaId);
        if (turma != null)
        {
            //var confirmacao = await JSRuntime.InvokeAsync<bool>("confirm", 
            //    $"Deseja realmente excluir a turma '{turma.Nome}'?");
            Util util = new Util(DialogService, Snackbar);
            var confirmacao = await util.DialogConfirma(
                msg: $"Deseja realmente excluir a turma '{turma.Nome}'?", 
                buttonText: "Excluir", 
                color: Color.Error, 
                titulo: "Confirmar Exclusão");
            
            if (confirmacao)
            {
                await EscolaService.ExcluirTurma(turmaId);
                turmas = EscolaService.TurmaListar();
                StateHasChanged();
                Snackbar.Add(message: "Turma excluída com sucesso!", Severity.Success);
            }
        }
    }

    
}