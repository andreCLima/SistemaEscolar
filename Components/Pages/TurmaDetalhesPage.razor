@page "/turma/detalhes/{TurmaId:int}"
@rendermode InteractiveServer
@using SistemaEscolarWeb.Models
@using SistemaEscolarWeb.Services
@using SistemaEscolarWeb.Components.Shared

@inject EscolaService EscolaService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>Detalhes da Turma</PageTitle>

<div class="container-fluid">
    @if (turma != null)
    {
        var serie = EscolaService.GetEscola().Series.FirstOrDefault(s => s.Turmas.Contains(turma));
        
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Turma: @turma.Nome (@(serie?.Nome ?? "Série não encontrada"))</h1>
            <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/turma"))">
                <i class="bi bi-arrow-left"></i> Voltar
            </button>
        </div>

        <!-- Tabela de Horários -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Horários</h5>
                <small class="text-muted">Clique na célula para cadastrar, alterar ou excluir uma aula</small>
            </div>
            <div class="card-body">
                @{
                    var diasSemana = new[] { "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab" };
                    var aulasTurma = turma.Diarios.SelectMany(d => d.Aulas).ToList();
                }
                
                <div class="table-responsive">
                    <table class="table table-bordered table-sm" style="font-size: 0.85rem;">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center">Aula</th>
                                @foreach (var dia in diasSemana)
                                {
                                    <th class="text-center">@dia</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 1; i <= 7; i++)
                            {
                                <tr>
                                    <td class="text-center fw-bold bg-light" style="vertical-align: middle;">
                                        @(i)ª Aula
                                    </td>
                                    @foreach (var dia in diasSemana)
                                    {
                                        var aula = aulasTurma.FirstOrDefault(a => a.DiaSemana == dia && a.NumeroAula == i);
                                        var diaLocal = dia; // Capturar valor local para evitar closure
                                        var numeroAulaLocal = i; // Capturar valor local para evitar closure
                                        <td class="text-center" 
                                            @onclick="@(() => ClicarCelulaHorario(diaLocal, numeroAulaLocal))"
                                            style="cursor: pointer; min-height: 60px; vertical-align: middle;">
                                            @if (aula != null)
                                            {
                                                var diario = turma.Diarios.FirstOrDefault(d => d.Aulas.Contains(aula));
                                                <div class="p-1" style="background-color: #e3f2fd; border-radius: 4px; font-size: 0.75rem;">
                                                    <strong>@diario?.Disciplina</strong><br/>
                                                    <small class="text-muted" style="font-size: 0.7rem;">@diario?.Educador</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-muted" style="opacity: 0.5; font-size: 0.75rem;">
                                                    <i class="bi bi-plus-circle"></i>
                                                    <small class="text-muted" style="font-size: 0.7rem;">Sem Aula</small>
                                                </div>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Tabela de Diários -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Diários</h5>
                <div>
                    <button class="btn btn-sm btn-primary me-2" @onclick="@(() => CadastrarDiario())">
                        <i class="bi bi-plus-circle"></i> Cadastrar Diário
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Professor</th>
                                <th>Disciplina</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var diario in turma.Diarios)
                            {
                                <tr>
                                    <td>@diario.Educador</td>
                                    <td>@diario.Disciplina</td>
                                    <td>
                                        <button class="btn btn-sm btn-info me-2" @onclick="@(() => VerDiario(diario.ID))">
                                            <i class="bi bi-eye"></i> Ver
                                        </button>
                                        <button class="btn btn-sm btn-warning me-2" @onclick="@(() => AlterarDiario(diario.ID))">
                                            <i class="bi bi-pencil"></i> Alterar
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="@(() => ExcluirDiario(diario.ID))">
                                            <i class="bi bi-trash"></i> Excluir
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Tabela de Estudantes -->
        <TabelaEstudantes 
            TurmaId="TurmaId"
            Titulo="Estudantes"
            Estudantes="turma.Estudantes"
            MostrarBotoesAcao="true"
            MensagemVazia="Nenhum estudante cadastrado nesta turma." 
        />
    }
    else
    {
        <div class="alert alert-danger">
            <h4>Turma não encontrada!</h4>
            <p>A turma solicitada não foi encontrada.</p>
            <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/turma"))">
                <i class="bi bi-arrow-left"></i> Voltar para Lista
            </button>
        </div>
    }
</div>

<!-- Modal para Cadastro de Aula -->
@if (mostrarModalCadastroAula)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cadastrar Aula</h5>
                    <button type="button" class="btn-close" @onclick="FecharModalCadastroAula"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Dia da Semana</label>
                            <input type="text" class="form-control" value="@diaSemanaSelecionado" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Número da Aula</label>
                            <input type="text" class="form-control" value="@numeroAulaSelecionado" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="diarioAula" class="form-label">Diário *</label>
                            <select class="form-select" id="diarioAula" @bind="diarioSelecionado" required>
                                <option value="0">Selecione um diário</option>
                                @if (turma != null)
                                {
                                    @foreach (var diario in turma.Diarios)
                                    {
                                        <option value="@diario.ID">@diario.Disciplina - @diario.Educador</option>
                                    }
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalCadastroAula">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="SalvarAula">
                        <i class="bi bi-check-circle"></i> Salvar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para Alteração de Aula -->
@if (mostrarModalAlteracaoAula)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Alterar Aula</h5>
                    <button type="button" class="btn-close" @onclick="FecharModalAlteracaoAula"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Dia da Semana</label>
                            <input type="text" class="form-control" value="@diaSemanaAlteracao" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Número da Aula</label>
                            <input type="text" class="form-control" value="@numeroAulaAlteracao" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="diarioAlteracao" class="form-label">Diário *</label>
                            <select class="form-select" id="diarioAlteracao" @bind="diarioAlteracao" required>
                                <option value="0">Selecione um diário</option>
                                @if (turma != null)
                                {
                                    @foreach (var diario in turma.Diarios)
                                    {
                                        <option value="@diario.ID">@diario.Disciplina - @diario.Educador</option>
                                    }
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalAlteracaoAula">Cancelar</button>
                    <button type="button" class="btn btn-danger me-2" @onclick="ExcluirAula">
                        <i class="bi bi-trash"></i> Excluir
                    </button>
                    <button type="button" class="btn btn-warning" @onclick="SalvarAlteracaoAula">
                        <i class="bi bi-check-circle"></i> Salvar Alterações
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para Cadastro de Diário -->
@if (mostrarModalCadastroDiario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cadastrar Novo Diário</h5>
                    <button type="button" class="btn-close" @onclick="FecharModalCadastroDiario"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="disciplinaDiario" class="form-label">Disciplina *</label>
                            <select class="form-select" id="disciplinaDiario" @bind="disciplinaDiario" required>
                                <option value="">Selecione uma disciplina</option>
                                <option value="Matematica">Matematica</option>
                                <option value="Portugues">Portugues</option>
                                <option value="Literatura">Literatura</option>
                                <option value="Redacao">Redacao</option>
                                <option value="Historia">Historia</option>
                                <option value="Geografia">Geografia</option>
                                <option value="Filosofia">Filosofia</option>
                                <option value="Sociologia">Sociologia</option>
                                <option value="Fisica">Fisica</option>
                                <option value="Quimica">Quimica</option>
                                <option value="Biologia">Biologia</option>
                                <option value="Ingles">Ingles</option>
                                <option value="Espanhol">Espanhol</option>
                                <option value="Artes">Artes</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="educadorDiario" class="form-label">Educador/Professor *</label>
                            <InputText id="educadorDiario"
                                        class="form-control"
                                        @bind-Value="educadorDiario"
                                        placeholder="Nome do professor"
                                        required
                                        oninput="this.value=this.value.replace(/[^A-Za-z\s]/g,'')" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalCadastroDiario">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="SalvarDiario">
                        <i class="bi bi-check-circle"></i> Salvar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para Alteração de Diário -->
@if (mostrarModalAlteracaoDiario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Alterar Diário</h5>
                    <button type="button" class="btn-close" @onclick="FecharModalAlteracaoDiario"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="disciplinaAlteracao" class="form-label">Disciplina *</label>
                            <select class="form-select" id="disciplinaAlteracao" @bind="disciplinaAlteracao" required>
                                <option value="">Selecione uma disciplina</option>
                                <option value="Matematica">Matematica</option>
                                <option value="Portugues">Portugues</option>
                                <option value="Literatura">Literatura</option>
                                <option value="Redacao">Redacao</option>
                                <option value="Historia">Historia</option>
                                <option value="Geografia">Geografia</option>
                                <option value="Filosofia">Filosofia</option>
                                <option value="Sociologia">Sociologia</option>
                                <option value="Fisica">Fisica</option>
                                <option value="Quimica">Quimica</option>
                                <option value="Biologia">Biologia</option>
                                <option value="Ingles">Ingles</option>
                                <option value="Espanhol">Espanhol</option>
                                <option value="Artes">Artes</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="educadorAlteracao" class="form-label">Educador/Professor *</label>
                            <InputText id="educadorAlteracao"
                                        class="form-control"
                                        @bind-Value="educadorAlteracao"
                                        placeholder="Nome do professor"
                                        required
                                        oninput="this.value=this.value.replace(/[^A-Za-z\s]/g,'')" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalAlteracaoDiario">Cancelar</button>
                    <button type="button" class="btn btn-warning" @onclick="SalvarAlteracaoDiario">
                        <i class="bi bi-check-circle"></i> Salvar Alterações
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] 
    public int TurmaId { get; set; }
    private Models.Turma? turma;
    private bool mostrarModalCadastroAula = false;
    private string diaSemanaSelecionado = string.Empty;
    private int numeroAulaSelecionado = 0;
    private int diarioSelecionado = 0;
    private bool mostrarModalAlteracaoAula = false;
    private int aulaIdAlteracao = 0;
    private string diaSemanaAlteracao = string.Empty;
    private int numeroAulaAlteracao = 0;
    private int diarioAlteracao = 0;
    private bool mostrarModalCadastroDiario = false;
    private string disciplinaDiario = string.Empty;
    private string educadorDiario = string.Empty;
    private bool mostrarModalAlteracaoDiario = false;
    private int diarioIdAlteracao = 0;
    private string disciplinaAlteracao = string.Empty;
    private string educadorAlteracao = string.Empty;

    //private bool mostrarModalCadastroEstudante = false;
    private string nomeEstudante = string.Empty;
    //private bool mostrarModalAlteracaoEstudante = false;
    //private int estudanteIdAlteracao = 0;
    private string nomeAlteracao = string.Empty;

    protected override void OnInitialized()
    {
        turma = EscolaService.GetTurmaPorId(TurmaId);
    }

    private void ClicarCelulaHorario(string dia, int numeroAula)
    {
        // Verificar se já existe uma aula neste horário
        var aulaExistente = turma?.Diarios.SelectMany(d => d.Aulas)
            .FirstOrDefault(a => a.DiaSemana == dia && a.NumeroAula == numeroAula);
        
        if (aulaExistente != null)
        {
            // Se já existe aula, abrir modal de alteração
            AbrirModalAlteracaoAula(aulaExistente);
            return;
        }

        // Verificar se existem diários cadastrados
        if (turma?.Diarios.Count == 0)
        {
            //JSRuntime.InvokeVoidAsync("alert", "Não há diários cadastrados. Cadastre um diário primeiro.");
            Snackbar.Add(message: "Não há diários cadastrados. Cadastre um diário primeiro.", Severity.Warning);
            return;
        }

        // Se não existe aula, abrir modal de cadastro
        diaSemanaSelecionado = dia;
        numeroAulaSelecionado = numeroAula;
        diarioSelecionado = 0;
        mostrarModalCadastroAula = true;
    }

    private void FecharModalCadastroAula()
    {
        mostrarModalCadastroAula = false;
        diaSemanaSelecionado = string.Empty;
        numeroAulaSelecionado = 0;
        diarioSelecionado = 0;
    }

    private async Task SalvarAula()
    {
        if (diarioSelecionado == 0)
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, selecione um diário.");
            Snackbar.Add(message: "Por favor, selecione um diário.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.CadastrarAula(diarioSelecionado, diaSemanaSelecionado, numeroAulaSelecionado);
            
            // Atualizar a turma para refletir as mudanças
            turma = EscolaService.GetTurmaPorId(TurmaId);
            FecharModalCadastroAula();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Aula cadastrada com sucesso!");
            Snackbar.Add(message: "Aula cadastrada com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao cadastrar aula: {ex.Message}");
            Snackbar.Add(message: $"Erro ao cadastrar aula: {ex.Message}", Severity.Error);
        }
    }

    private void AbrirModalAlteracaoAula(Models.Aula aula)
    {
        aulaIdAlteracao = aula.ID;
        diaSemanaAlteracao = aula.DiaSemana;
        numeroAulaAlteracao = aula.NumeroAula;
        
        // Encontrar o diário que contém esta aula
        var diario = turma?.Diarios.FirstOrDefault(d => d.Aulas.Contains(aula));
        diarioAlteracao = diario?.ID ?? 0;
        
        mostrarModalAlteracaoAula = true;
    }

    private void FecharModalAlteracaoAula()
    {
        mostrarModalAlteracaoAula = false;
        aulaIdAlteracao = 0;
        diaSemanaAlteracao = string.Empty;
        numeroAulaAlteracao = 0;
        diarioAlteracao = 0;
    }

    private async Task SalvarAlteracaoAula()
    {
        if (diarioAlteracao == 0)
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, selecione um diário.");
            Snackbar.Add(message: "Por favor, selecione um diário.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.AlterarAula(aulaIdAlteracao, diarioAlteracao, diaSemanaAlteracao, numeroAulaAlteracao);
            
            // Atualizar a turma 
            turma = EscolaService.GetTurmaPorId(TurmaId);
            FecharModalAlteracaoAula();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Aula alterada com sucesso!");
            Snackbar.Add(message: "Aula alterada com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao alterar aula: {ex.Message}");
            Snackbar.Add(message: $"Erro ao alterar aula: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExcluirAula()
    {
        var aula = turma?.Diarios.SelectMany(d => d.Aulas)
            .FirstOrDefault(a => a.ID == aulaIdAlteracao);
        
        if (aula != null)
        {
            /*
            var confirmacao = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Deseja realmente excluir a aula do dia {aula.DiaSemana}, número {aula.NumeroAula}?\n\n");
            */
            Util util = new Util(DialogService, Snackbar);
            var confirmacao = await util.DialogConfirma(
                msg: $"Deseja realmente excluir a aula do dia {aula.DiaSemana}, número {aula.NumeroAula}?\n\n",
                buttonText: "Excluir",
                color: Color.Error,
                titulo: "Confirmar Exclusão");
            
            if (confirmacao)
            {
                try
                {
                    await EscolaService.ExcluirAula(aulaIdAlteracao);
                    
                    // Atualizar a turma para refletir as mudanças
                    turma = EscolaService.GetTurmaPorId(TurmaId);
                    FecharModalAlteracaoAula();
                    StateHasChanged();
                    //await JSRuntime.InvokeVoidAsync("alert", "Aula excluída com sucesso!");
                    Snackbar.Add(message: "Aula excluída com sucesso!", Severity.Success);
                }
                catch (Exception ex)
                {
                    //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao excluir aula: {ex.Message}");
                    Snackbar.Add(message: $"Erro ao excluir aula: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private void CadastrarDiario()
    {
        disciplinaDiario = string.Empty;
        educadorDiario = string.Empty;
        mostrarModalCadastroDiario = true;
    }

    private void FecharModalCadastroDiario()
    {
        mostrarModalCadastroDiario = false;
        disciplinaDiario = string.Empty;
        educadorDiario = string.Empty;
    }

    private async Task SalvarDiario()
    {
        if (string.IsNullOrWhiteSpace(disciplinaDiario) || string.IsNullOrWhiteSpace(educadorDiario))
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, preencha todos os campos obrigatórios.");
            Snackbar.Add(message: "Por favor, preencha todos os campos obrigatórios.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.CadastrarDiario(TurmaId, disciplinaDiario, educadorDiario);
            
            // Atualizar a turma para refletir as mudanças
            turma = EscolaService.GetTurmaPorId(TurmaId);
            FecharModalCadastroDiario();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Diário cadastrado com sucesso!");
            Snackbar.Add(message: "Diário cadastrado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao cadastrar diário: {ex.Message}");
            Snackbar.Add(message: $"Erro ao cadastrar diário: {ex.Message}", Severity.Error);
        }
    }

    private void AlterarDiario(int diarioId)
    {
        var diario = EscolaService.GetDiarioPorId(diarioId);
        if (diario != null)
        {
            diarioIdAlteracao = diarioId;
            disciplinaAlteracao = diario.Disciplina;
            educadorAlteracao = diario.Educador;
            mostrarModalAlteracaoDiario = true;
        }
    }

    private void FecharModalAlteracaoDiario()
    {
        mostrarModalAlteracaoDiario = false;
        diarioIdAlteracao = 0;
        disciplinaAlteracao = string.Empty;
        educadorAlteracao = string.Empty;
    }

    private async Task SalvarAlteracaoDiario()
    {
        if (string.IsNullOrWhiteSpace(disciplinaAlteracao) || string.IsNullOrWhiteSpace(educadorAlteracao))
        {
            //await JSRuntime.InvokeVoidAsync("alert", "Por favor, preencha todos os campos obrigatórios.");
            Snackbar.Add(message: "Por favor, preencha todos os campos obrigatórios.", Severity.Warning);
            return;
        }

        try
        {
            await EscolaService.AlterarDiario(diarioIdAlteracao, disciplinaAlteracao, educadorAlteracao);
            
            // Atualizar a turma para refletir as mudanças
            turma = EscolaService.GetTurmaPorId(TurmaId);
            FecharModalAlteracaoDiario();
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "Diário alterado com sucesso!");
            Snackbar.Add(message: "Diário alterado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao alterar diário: {ex.Message}");
            Snackbar.Add(message: $"Erro ao alterar diário: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExcluirDiario(int diarioId)
    {
        var diario = EscolaService.GetDiarioPorId(diarioId);
        if (diario != null)
        {
            /*
            var confirmacao = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Deseja realmente excluir o diário '{diario.Disciplina}' do professor '{diario.Educador}'?\n\n");
            */
            Util util = new Util(DialogService, Snackbar);
            var confirmacao = await util.DialogConfirma(
                msg: $"Deseja realmente excluir o diário '{diario.Disciplina}' do professor '{diario.Educador}'?\n\n",
                buttonText: "Excluir",
                color: Color.Error,
                titulo: "Confirmar Exclusão");
            if (confirmacao)
            {
                try
                {
                    await EscolaService.ExcluirDiario(diarioId);
                    
                    // Atualizar a turma para refletir as mudanças
                    turma = EscolaService.GetTurmaPorId(TurmaId);
                    StateHasChanged();
                    //await JSRuntime.InvokeVoidAsync("alert", "Diário excluído com sucesso!");
                    Snackbar.Add(message: "Diário excluído com sucesso!", Severity.Success);
                }
                catch (Exception ex)
                {
                    //await JSRuntime.InvokeVoidAsync("alert", $"Erro ao excluir diário: {ex.Message}");
                    Snackbar.Add(message: $"Erro ao excluir diário: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private void VerDiario(int diarioId)
    {
        Navigation.NavigateTo($"/diario/detalhes/{diarioId}");
    }
}